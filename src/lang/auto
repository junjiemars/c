# -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## lang/auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi


# check ncstd.h features
ncc_cache_line_size="yes"
ncc_cpu_endian="yes"
ncc_sanitize_address="yes"
ndef_restrict="yes"
ndef_static_assert="yes"
ndef_va_args="yes"
nstr_strdup="yes"
. ${POSIX_ROOT}/ncstd_auto


echo "checking for {lang} ..."


# check header files
#----------------------------------------
include="err.h" . ${NORE_ROOT}/auto/include
include="fenv.h" . ${NORE_ROOT}/auto/include
# include="inttypes.h" . ${NORE_ROOT}/auto/include
include="iso646.h" . ${NORE_ROOT}/auto/include
# include="stdint.h" . ${NORE_ROOT}/auto/include
# include="wchar.h" . ${NORE_ROOT}/auto/include
# include="wctype.h" . ${NORE_ROOT}/auto/include


# check sprintf_s
#----------------------------------------
case "$CC_NAME" in
  msvc)
    nm_feature="sprintf_s()"
    nm_feature_name="NM_HAVE_SPRINTF_S"
    nm_feature_run=no
    nm_feature_h="#include <stdio.h>"
    nm_feature_flags=
    nm_feature_test='char buf[32];
                    sprintf_s(buf, sizeof(buf), "%s", "xyz");'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac


# check snprintf
#----------------------------------------
nm_feature="snprintf()"
nm_feature_name="NM_HAVE_SNPRINTF"
nm_feature_run=no
nm_feature_h="#include <stdio.h>"
nm_feature_flags=
nm_feature_test='char buf[32];
                 snprintf(buf, sizeof(buf), "%s", "xyz");'
. ${NORE_ROOT}/auto/feature


# check strnlen
#----------------------------------------
nm_feature="strnlen()"
nm_feature_name="NM_HAVE_STRNLEN"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='size_t len = strnlen("xyz", 16);'
. ${NORE_ROOT}/auto/feature


# check strncpy
#----------------------------------------
nm_feature="strncpy()"
nm_feature_name="NM_HAVE_STRNCPY"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='char buf[16];
                 strncpy(buf, "xyz", sizeof(buf));'
. ${NORE_ROOT}/auto/feature

# check strncat
#----------------------------------------
nm_feature="strncat()"
nm_feature_name="NM_HAVE_STRNCAT"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='char *s1=0;strncat(s1, "abc", 1);'
. ${NORE_ROOT}/auto/feature

# check strncmp
#----------------------------------------
nm_feature="strncmp()"
nm_feature_name="NM_HAVE_STRNCMP"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='strncmp("abc", "aBc", 1);'
. ${NORE_ROOT}/auto/feature

# check strndup
#----------------------------------------
case "$CC_NAME" in
  gcc|clang)
    nm_feature="strndup()"
    nm_feature_name="NM_HAVE_STRNDUP"
    nm_feature_run=no
    nm_feature_h='
#include <string.h>
#include <stdlib.h>'
    nm_feature_flags=
    nm_feature_test='
char *xyz = strndup("xyz", sizeof("xyz")-1);
free(xyz);'
    . ${NORE_ROOT}/auto/feature
    ;;
  msvc)
    nm_feature="strndup()"
    nm_feature_name="NM_HAVE_STRNDUP"
    nm_feature_run=no
    nm_feature_h='
#include <string.h>
#include <stdlib.h>'
    nm_feature_flags=
    nm_feature_test='
char *xyz = _strndup("xyz", sizeof("xyz")-1);
free(xyz);'
    . ${NORE_ROOT}/auto/feature
		;;
esac

# check strsep
#----------------------------------------
nm_feature="strsep()"
nm_feature_name="NM_HAVE_STRSEP"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='char *s;strsep(&s, ",");'
. ${NORE_ROOT}/auto/feature

# check strtok_r
#----------------------------------------
nm_feature="strtok_r()"
nm_feature_name="NM_HAVE_STRTOK_R"
nm_feature_run=no
nm_feature_h="#include <string.h>"
nm_feature_flags=
nm_feature_test='strtok_r("a,b,c", ",", 1);'
. ${NORE_ROOT}/auto/feature

# check arc4random_uniform
#----------------------------------------
case "$NM_SYSTEM" in
  Darwin)
    nm_feature="arc4random_uniform()"
    nm_feature_name='NM_HAVE_ARC4RANDOM_UNIFORM'
    nm_feature_indent=yes
    nm_feature_run=no
    nm_feature_h='#include <stdlib.h>'
    nm_feature_flags="$CFLAGS"
    nm_feature_test='arc4random_uniform(1);'
    . ${NORE_ROOT}/auto/feature
    ;;
  WinNT)
    nm_feature="crt_rand_s()"
    nm_feature_name='NM_HAVE_CRT_RAND_S'
    nm_feature_indent=yes
    nm_feature_run=no
    nm_feature_h='#define _CRT_RAND_S
                  #include <stdlib.h>'
    nm_feature_flags=
    nm_feature_test='unsigned int u = 10;
                     (error_t) rand_s(&u);'
    . ${NORE_ROOT}/auto/feature
    ;;
esac


# check rand_s
#----------------------------------------
case "$CC_NAME" in
  msvc)
    nm_feature="rand_s()"
    nm_feature_name='nm_HAVE_RAND_S'
    nm_feature_run=no
    nm_feature_h='#include <stdlib.h>'
    nm_feature_flags=
    nm_feature_test='unsigned int x; rand_s(&x);'
    . ${NORE_ROOT}/auto/feature
    ;;
  *)
    ;;
esac


# EOF
