#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/nstr_auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi

# check for <npstd.h>
. ${POSIX_ROOT}/npstd_auto


if [    "$nstr_strdup" = "yes"                  \
     -o "$nstr_strerror_r" = "yes"              \
     -o "$nstr_strtok_r" = "yes"                \
   ]; then
  echo "checking for nstr.h ..."
else
  return
fi



# check strdup
#----------------------------------------
if [ "$nstr_strdup" = "yes" -a -z "$nstr_strdup_done" ]; then
  case $NM_SYSTEM in
    Linux)
      nm_feature="strdup"
      nm_feature_name="nm_have_strdup"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=$_POSIX_C_SOURCE"
      nm_feature_test='char *s = strdup("a"); (void)s;'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="strdup"
      nm_feature_name="nm_have_strdup"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags="-D_CRT_SECURE_NO_WARNINGS $CFLAGS"
      nm_feature_test='char *s = _strdup("a"); (void)s;'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      nm_feature="strdup"
      nm_feature_name="nm_have_strdup"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags="$CFLAGS"
      nm_feature_test='char *s = strdup("a"); (void)s;'
      . ${NORE_ROOT}/auto/feature
      ;;
  esac
  nstr_strdup_done="yes"
fi


# check strerror_r
#----------------------------------------
if [ "$nstr_strerror_r" = "yes" -a -z "$nstr_strerror_r_done" ]; then
  case $NM_SYSTEM in
    Linux)
      nm_feature="strerror_r"
      nm_feature_name="nm_have_strerror_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=$_POSIX_C_SOURCE"
      nm_feature_test='int r = strerror_r(1,0,0); (void)r;'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="strerror_r"
      nm_feature_name="nm_have_strerror_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags=
      nm_feature_test='int r = strerror_s(0,0,1); (void)r;'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      nm_feature="strerror_r"
      nm_feature_name="nm_have_strerror_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags=
      nm_feature_test='int r = strerror_r(1,0,0); (void)r;'
      . ${NORE_ROOT}/auto/feature
      ;;
  esac
  nstr_strerror_r_done="yes"
fi                              # strerror_r

# check strtok_r
#----------------------------------------
if [ "$nstr_strtok_r" = "yes" -a -z "$nstr_strtok_r_done" ]; then
  case $NM_SYSTEM in
    Linux)
      nm_feature="strtok_r"
      nm_feature_name="nm_have_strtok_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags="-D_POSIX_C_SOURCE=$_POSIX_C_SOURCE"
      nm_feature_test='(void)strtok_r(0,0,0);'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="strtok_r"
      nm_feature_name="nm_have_strtok_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags=
      nm_feature_test='(void)strtok_r(0,0,0);'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      nm_feature="strtok_r"
      nm_feature_name="nm_have_strtok_r"
      nm_feature_run=no
      nm_feature_h='#include <string.h>'
      nm_feature_flags=
      nm_feature_test='(void)strtok_r(0,0,0);'
      . ${NORE_ROOT}/auto/feature
      ;;
  esac
  nstr_strtok_r_done="yes"
fi                              # strtok_r



# eof
