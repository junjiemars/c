#### -*- mode:sh -*- vim:ft=sh
####
## No More than a C build system for clang, gcc and msvc.
## https://github.com/junjiemars/nore
####
## posix/ncc_auto
####


if [ -z "$POSIX_ROOT" ]; then
  POSIX_ROOT="src/posix"
fi

if [    "$ncc_cpu_endian" = "yes"                       \
     -o "$ncc_cache_line_size" = "yes"                  \
     -o "$ncc_omit_frame_pointer" = "yes"               \
     -o "$ncc_no_omit_frame_pointer" = "yes"            \
     -o "$ncc_sanitize_address" = "yes"                 \
     -o "$ncc_sanitize_alignment" = "yes"               \
     -o "$ncc_sanitize_signed_integer_overflow" = "yes" \
     -o "$ncc_sanitize_leak" = "yes"                    \
     -o "$ncc_pic" = "yes"                      \
   ]; then
  echo "checking for CC's features ..."
else
  return
fi


# check endian features
#----------------------------------------
if [ "$ncc_cpu_endian" = "yes" -a -z "$ncc_cpu_endian_done" ]; then
  nm_feature="cpu endian"
  nm_feature_name="nm_cpu_little_endian"
  nm_feature_indent=yes
  nm_feature_run=value
  nm_feature_h="#include <stdio.h>"
  nm_feature_flags=
  nm_feature_test='int i=0x11223344;
                 char *p = (char*)&i;
                 int le = (0x44 == *p);
                 printf("%d", le);
                 return 0;'
  . ${NORE_ROOT}/auto/feature
  ncc_cpu_endian_done="yes"
fi


# check cache-line features
# ----------------------------------------
if [ "$ncc_cache_line_size" = "yes" -a -z "$ncc_cache_line_size_done" ]; then
  case "$NM_SYSTEM" in
    Darwin)
      nm_feature="cache line size"
      nm_feature_name='nm_cpu_cache_line'
      nm_feature_indent=yes
      nm_feature_run=value
      nm_feature_h='
      #include <stdio.h>
      #include<sys/sysctl.h>'
      nm_feature_flags=
      nm_feature_value=
      nm_feature_test='
size_t line = 0;
size_t size = sizeof(line);
if (!sysctlbyname("hw.cachelinesize", &line, &size, 0, 0)) {
   printf("%d\n", (int)line);
   return 0;
}
return 1;'
      . ${NORE_ROOT}/auto/feature
      ;;
    Linux)
      nm_feature="cache line size"
      nm_feature_name='nm_cpu_cache_line'
      nm_feature_indent=yes
      nm_feature_run=value
      nm_feature_h='#include <stdio.h>'
      nm_feature_flags=
      nm_feature_value=
      nm_feature_test='
FILE * p = fopen("/sys/devices/system/cpu/cpu0/cache/index0/"
                 "coherency_line_size", "r");
if (p) {
    int i = 0;
    fscanf(p, "%d", &i);
    fclose(p);
    printf("%d\n", i);
    return 0;
}
return 1;'
      . ${NORE_ROOT}/auto/feature
      ;;
    WinNT)
      nm_feature="cache line size"
      nm_feature_name='nm_cpu_cache_line'
      nm_feature_indent=yes
      nm_feature_run=value
      nm_feature_h='
      #include <stdlib.h>
      #include <stdio.h>
      #include <windows.h>'
      nm_feature_flags=
      nm_feature_value=
      nm_feature_test='
size_t line = 0;
DWORD size = 0;
SYSTEM_LOGICAL_PROCESSOR_INFORMATION *buf = 0;
GetLogicalProcessorInformation(0, &size);
if (!size) {
  return 1;
}
buf = (SYSTEM_LOGICAL_PROCESSOR_INFORMATION*)malloc(size);
if (!buf) {
  return 1;
}
if (GetLogicalProcessorInformation(&buf[0], &size)) {
  for (DWORD i=0; i!=size/sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION);i++) {
    if (buf[i].Relationship == RelationCache && 1 == buf[i].Cache.Level) {
      line = buf[i].Cache.LineSize;
      break;
    }
  }
}
free(buf);
if (line) {
  printf("%d\n", (int)line);
  return 0;
}
return 1;'
      . ${NORE_ROOT}/auto/feature
      ;;
    *)
      nm_found=no
      ;;
  esac
  if [ "yes" = "$nm_found" ]; then
    NM_CPU_CACHE_LINE=$nm_feature_value
  else
    case "$NM_MACHINE" in
      aarch64)           NM_CPU_CACHE_LINE=128 ;;
      x86_64|amd64|ia64) NM_CPU_CACHE_LINE=64 ;;
      i386|i686|i86pc|*) NM_CPU_CACHE_LINE=32 ;;
    esac
    have=NM_CPU_CACHE_LINE \
      value=$NM_CPU_CACHE_LINE . ${NORE_ROOT}/auto/define
  fi                            # end of check cache line size
  ncc_cache_line_size_done="yes"
fi                              # end of $ncc_cache_line_size



# check frame-pointer features
#----------------------------------------
if [ "$ncc_omit_frame_pointer" = "yes" ] \
     && [ -z "$ncc_omit_frame_pointer_done" ]; then
  case "$CC_NAME" in
    clang|gcc)
      if [ "$ncc_omit_frame_pointer" = "yes" ]; then
        nm_feature="-fomit-frame-pointer"
        nm_feature_name=
        nm_feature_indent=yes
        nm_feature_run=no
        nm_feature_h=
        nm_feature_flags='-fomit-frame-pointer'
        nm_feature_test=
        . ${NORE_ROOT}/auto/feature
        if [ yes = $nm_found ]; then
          flag=f_omit_frame_pointer \
            op=':=' value=$nm_feature_flags . ${NORE_ROOT}/auto/make_define
        fi
      fi
      if [ "$ncc_no_omit_frame_pointer" = "yes" ]; then
        nm_feature="-fno-omit-frame-pointer"
        nm_feature_name=
        nm_feature_indent=yes
        nm_feature_run=no
        nm_feature_h=
        nm_feature_flags='-fno-omit-frame-pointer'
        nm_feature_test=
        . ${NORE_ROOT}/auto/feature
        if [ yes = $nm_found ]; then
          flag=f_no_omit_frame_pointer \
            op=':=' value=$nm_feature_flags . ${NORE_ROOT}/auto/make_define
        fi
      fi
      ;;
    msvc)
      if [ "$ncc_omit_frame_pointer" = "yes" ]; then
        nm_feature="-Oy"
        nm_feature_name=
        nm_feature_indent=yes
        nm_feature_run=no
        nm_feature_h=
        nm_feature_flags='-Oy'
        nm_feature_test=
        . ${NORE_ROOT}/auto/feature
        if [ yes = $nm_found ]; then
          flag=f_omit_frame_pointer \
            op=':=' value=$nm_feature_flags . ${NORE_ROOT}/auto/make_define
        fi
      fi
      if [ "$ncc_no_omit_frame_pointer" = "yes" ]; then
        nm_feature="-Oy-"
        nm_feature_name=
        nm_feature_indent=yes
        nm_feature_run=no
        nm_feature_h=
        nm_feature_flags='-Oy-'
        nm_feature_test=
        . ${NORE_ROOT}/auto/feature
        if [ yes = $nm_found ]; then
          flag=f_no_omit_frame_pointer \
            op=':=' value=$nm_feature_flags . ${NORE_ROOT}/auto/make_define
        fi
      fi
      ;;
  esac
  ncc_omit_frame_pointer_done="yes"
fi                              # ncc_omit_frame_pointer


# check sanitize feature
#----------------------------------------
case "$CC_NAME" in
   gcc|clang)
     if [ "$ncc_sanitize_address" = "yes" ] \
          && [ -z "$ncc_sanitize_address_done" ]; then
       nm_feature="-fsanitize=address"
       nm_feature_name=
       nm_feature_indent=yes
       nm_feature_run=no
       nm_feature_h=
       nm_feature_flags='-fsanitize=address'
       nm_feature_test=
       . ${NORE_ROOT}/auto/feature
       if [ yes = $nm_found ]; then
         flag=f_sanitize_address op=':=' value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
         flag=f_sanitize                        \
           op="+=" value=$nm_feature_flags      \
           . ${NORE_ROOT}/auto/make_define
       fi
       ncc_sanitize_address_done="yes"
     fi
     if [ "$ncc_sanitize_alignment" = "yes" ] \
          && [ -z "$ncc_sanitize_alignment_done" ]; then
       nm_feature="-fsanitize=alignment"
       nm_feature_name=
       nm_feature_indent=yes
       nm_feature_run=no
       nm_feature_h=
       nm_feature_flags='-fsanitize=alignment'
       nm_feature_test=
       . ${NORE_ROOT}/auto/feature
       if [ yes = $nm_found ]; then
         flag=f_sanitize_alignment op=':=' value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
         flag=f_sanitize                        \
           op="+=" value=$nm_feature_flags      \
           . ${NORE_ROOT}/auto/make_define
       fi
       ncc_sanitize_alignment_done="yes"
     fi
     if [ "$ncc_sanitize_leak" = "yes" ] \
        && [ -z "$ncc_sanitize_leak_done" ]; then
       nm_feature="-fsanitize=leak"
       nm_feature_name=
       nm_feature_indent=yes
       nm_feature_run=no
       nm_feature_h=
       nm_feature_flags='-fsanitize=leak'
       nm_feature_test=
       . ${NORE_ROOT}/auto/feature
       if [ yes = $nm_found ]; then
        flag=f_sanitize_leak op=':=' value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
          flag=f_sanitize                        \
           op="+=" value=$nm_feature_flags      \
           . ${NORE_ROOT}/auto/make_define
       fi
       ncc_sanitize_leak_done="yes"
     fi
     if [ "$ncc_sanitize_signed_integer_overflow" = "yes" ] \
        && [ -z "$ncc_sanitize_signed_integer_overflow_done" ]; then
       nm_feature="-fsanitize=signed-integer-overflow"
       nm_feature_name=
       nm_feature_indent=yes
       nm_feature_run=no
       nm_feature_h=
       nm_feature_flags='-fsanitize=signed-integer-overflow'
       nm_feature_test=
       . ${NORE_ROOT}/auto/feature
       if [ yes = $nm_found ]; then
        flag=f_sanitize_signed_integer_overflow \
          op=':=' value=$nm_feature_flags \
          . ${NORE_ROOT}/auto/make_define
        flag=f_sanitize op="+=" value=$nm_feature_flags \
           . ${NORE_ROOT}/auto/make_define
       fi
       ncc_sanitize_signed_integer_overflow_done="yes"
     fi
     ;;
   msvc)
     ncc_sanitize_address_done="yes"
     ncc_sanitize_alignment_done="yes"
     ncc_sanitize_signed_integer_overflow_done="yes"
     ;;
esac


# check -fPIC
#----------------------------------------
if [ "$ncc_pic" = "yes" -a -z "$ncc_pic_done" ]; then
  case $CC_NAME in
  	clang|gcc)
  		nm_feature="-fPIC"
  		nm_feature_name=
      nm_feature_indent=yes
  		nm_feature_run=no
  		nm_feature_h=
  		nm_feature_flags='-fPIC'
  		nm_feature_test=
  		. ${NORE_ROOT}/auto/feature
  		if [ yes = $nm_found ]; then
  			flag=f_pic op=':=' value="$nm_feature_flags" \
          . ${NORE_ROOT}/auto/make_define
  		fi
      ncc_pic_done="yes"
  	;;
  	msvc)
      # msvc do not use position independent code
    ;;
  esac
  ncc_pic_done="yes"
fi                              # ncc_pic


# eof
