name: C

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:

  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - CC: "gcc"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libfl-dev
          sudo apt-get install libgccjit-10-dev
          sudo apt-get install libjemalloc-dev
          sudo apt-get install libssl-dev
          sudo apt-get install libuv1-dev
          sudo apt-get install nodejs npm
      - name: Setup Env
        run: |
          echo "_OS_ARCH_=$(uname -m)" >> $GITHUB_ENV
          echo "_A_MARK_=$(uname -m)-${{ matrix.CC }}" >> $GITHUB_ENV
      - name: Build and Test
        env:
          _CFG_OPT_: --with-release=no --with-optimize=no --with-symbol=yes
          CC: ${{ matrix.CC }}
        run: |
          ./test.sh
      - name: Zip Build Artifact
        env:
          _ZIP_X_: -x "out/tmp/*" -x "out/var/*" -x "*.o"
        run: |
          zip -r c-linux-${{ env._A_MARK_ }}.zip out/ ${{ env._ZIP_X_ }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: c-linux-${{ env._A_MARK_ }}.zip
          path: c-linux-${{ env._A_MARK_ }}.zip


  MacOS:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - CC: "clang"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          brew update
          brew install automake
          # brew install libuv # alreay installed
          # brew install node
          # brew install openssl # already installed
      - name: Setup Env
        run: |
          echo "_OS_ARCH_=$(uname -m)" >> $GITHUB_ENV
          echo "_A_MARK_=$(uname -m)-${{ matrix.CC }}" >> $GITHUB_ENV
      - name: Build and Test
        env:
          _CFG_OPT_: --with-release=no --with-optimize=no --with-symbol=yes
          CC: ${{ matrix.CC }}
        run: |
          ./test.sh
      - name: Zip Build Artifact
        env:
          _ZIP_X_: -x "out/tmp/*" -x "out/var/*" -x "**/*.dSYM/*" -x "**/.DS_Store" -x "*.o"
        run: |
          zip -r c-macos-${{ env._A_MARK_ }}.zip out/ ${{ env._ZIP_X_ }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: c-macos-${{ env._A_MARK_ }}.zip
          path: c-macos-${{ env._A_MARK_ }}.zip


  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - CC: "cl"
          - CC: "gcc"  
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0 # checkout history and tags
    - name: Install Dependencies
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          make
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-libgccjit
          zip
          libuv
          pkg-config
    - name: Setup Env
      run: |
        echo "_OS_ARCH_=$(uname -m)" >> $GITHUB_ENV
        echo "_A_MARK_=$(uname -m)-${{ matrix.CC }}" >> $GITHUB_ENV
    - name: Build and Test
      env:
        _CFG_OPT_: --with-release=no --with-optimize=no --with-symbol=yes
        CC: ${{ matrix.CC }}
      run: |
         ./test.sh
    - name: Zip Build Artifact
      env:
        _ZIP_X_: -x "out/tmp/*" -x "out/var/*" -x "*.ilk" -x "*.pdb" -x "*.obj" -x "*.exp"
      run: |
        zip -r c-windows-${{ env._A_MARK_ }}.zip out/ ${{ env._ZIP_X_ }}
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: c-windows-${{ env._A_MARK_ }}.zip
        path: c-windows-${{ env._A_MARK_ }}.zip


# EOF
